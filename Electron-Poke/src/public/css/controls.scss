
.form-control {
    &-input {
        border: none;
        outline: none;
        width: 100%;
        height: 40px;
        font-size: 18px;
        color: $primaryTextColor;
        background: $secondaryColor;
        padding-left: 5px;
    }

    // This is used for the conversation entering message
    // textarea. It resizes automatically using the angular
    // directive.
    &-textarea-resize {
        border:none;
        outline: none;
        width: 100%;
        font-size: 20px;
        color: $primaryTextColor;
        background: $secondaryColor;        
        padding-left: 5px;
        resize: none;
        line-height: 1.35;
        max-height: 80px;
    }
}

.search-control {
    border: 1px solid $primaryTextColor;
    border-radius: 5px;
    height: 40px;
    font-size: 20px;
    outline: none;
    width: inherit;
    background: $primaryTextColor;
    color: $secondaryTextColor;
    text-indent: 10px;
    margin-left: 20px;
    margin-right: 20px;
    margin-bottom: 10px;
    margin-top: 10px;
    transition: all 0.3s ease;

    // If the control is focused or if it has a value
    // in the sudo-has-value attribute then show it
    // in a different state.
    &:focus, &[sudo-has-value=true] {
        margin-left: 0;
        margin-right: 0;
        margin-top: 0;
        margin-bottom: 0;
        padding-bottom: 10px;
        padding-top: 10px;
        font-size: 24px;
        border-radius: 0;
        text-indent: 30px;
    }
}

.btn {
    border: none;
    outline: none;
    height: 40px;
    font-size: 18px;
    width: 100px;

    &:disabled {
        background: $tertiaryColor;
        color: $secondaryTextColor;
        cursor: not-allowed;
    }

    &-primary {
        background: $primaryColor;
        color: $primaryTextColor;
    }

    &-auto-size {
        width: auto;
        height: auto;
        padding: 10px;
    }
}

// Spinner
$spinnerBorderPixelWidth: 5px;
$spinnerBorderType: solid;
$spinnerWidthAndHeight: 50px;
$spinnerAnimationDuration: 1.5s;

.spinner {
    border: $spinnerBorderPixelWidth $spinnerBorderType #fff;
    border-left-color: transparent;
    border-right-color: transparent;
    border-radius: 50%;
    width: $spinnerWidthAndHeight;
    height: $spinnerWidthAndHeight;
    animation: spin $spinnerAnimationDuration linear infinite;

    &-primary {
        @extend .spinner;
        border: $spinnerBorderPixelWidth $spinnerBorderType $primaryColor; 
        border-left-color: transparent;
        border-right-color: transparent;
    }
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.check-box {
    // Hide the checkbox...
    display: none;
    
    & + label::before {
        content: '';
        cursor: pointer;
        width: 22px;
        height: 22px;
        border: solid 3px $tertiaryColor;
        border-radius: 10%;
        transition: border 0.5s;
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
    }

    & + label {
        display: inline-block;
        position: relative;
        cursor: pointer;
        user-select: none;
        font-size: 18px;
        min-height: 22px;
        color: $primaryTextColor;
        transition: color 0.5s;
        padding: 10px 0px 10px 40px;
    }

    & + label:hover::before, &:checked + label::before {
        border-color: $primaryColor;
    }

    &:disabled + label {
        color: $tertiaryColor;
        cursor: not-allowed;
    }
    &:disabled + label:hover::before {
        border-color: $tertiaryColor;
        cursor: not-allowed;
    }
    &:disabled:checked + label:hover::before {
        border-color: $primaryColor;
        cursor: not-allowed;
    }

    &:checked + label::after {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        width: 12px;
        height: 12px;
        background: $primaryColor;
        // translate x is equal to 
        // (width of checkbox - the width of the inner contents) / 2
        transform: translate(8px, -50%) rotate(45deg);
    }
}

.check-box-with-explanation {
    @extend .check-box;

    & ~ .explanation {
        color: $tertiaryColor;
        transition: color 0.5s;
    }

    &:checked ~ .explanation {
        color: $primaryColor;
    }
}